#!/usr/bin/perl -w

#/******************************************************************************
# *
# * Program property of Intel Corporation
# * (C) Copyright Intel Corporation, 2006
# * All Rights Reserved
# *
# * This program is the property of Intel and is furnished pursuant to a written
# * license agreement.  It may not be used, reproduced, or disclosed to others
# * except in accordance with the terms and conditions of that agreement.
# *
# ******************************************************************************
#
#/******************************************************************************
# * Filename: rideMacroOpt
# * Overview: This script runs RIDE on 2/3-ports by predetermining the
# *           self-resonance point.
# * Date:     Q4, 2006; Q1, 2008
# ******************************************************************************

use strict;
use Getopt::Long;

BEGIN { $| = 1; $SIG{'__WARN__'} = sub { die "ERROR: $_[0]"; }; }

my %optctl;
&GetOptions(\%optctl, 'help', 'ckt=s', 'threshold=s', 'copy=s', 'retain=s');

if ($optctl{help} or $#ARGV == -1) {
  print "Usage: rideMacroOpt [options] <filename.s[23]p> ...\n",
        "rideMacroOpt runs RIDE on 2/3-ports by predetermining self-resonance.\n",
        "Options:     -h|-help                    This message\n",
        "             -t|-threshold #,#,#         Set thresholds\n",
        "             -ckt *.ckt                  Use a fixed .ckt\n",
        "             -copy path                  Copy results from specified file\n",
        "             -retain elm,elm,...         Retain optimization for elements\n";
  exit 0;
}

my ($threshold, $corrThreshold, $LThreshold)
  = $optctl{threshold} ? split ':', $optctl{threshold} : (2.0, 99.00, 2.5);

print "-I- Thresholds: peak = $threshold, correlation = $corrThreshold, L = $LThreshold\n";

while (@ARGV) {

  my $file = shift @ARGV;
  print "-I- File = $file\n";
  my $s3p = ($file =~ /\.s3p$/) ? 1 : 0;

  my $ckt;
  my $cktBase = "/usr/tcad/RFDesigner/ride/latest/circuits";
  $cktBase = $optctl{ckt} if (defined $optctl{ckt});
  if ($s3p) {
    $ckt = "$cktBase/distributed_3port.ckt";
  } else {
    $ckt = "$cktBase/distributed_pi.ckt";
  }

  my $fileOpt = $file;
  my $fileLog = $file;
  $fileOpt =~ s/\.s([23])p$/_opt.s$1p/;
  $fileLog =~ s/\.s([23])p$/_opt.log/;
  $file =~ /\.s[23]p$/ or die "Error: Argument is not 2/3-port S-parameters.\n";
  $ckt =~ /\.ckt$/ or die "Error: Argument is not a RIDE ckt file.\n";

  my $ckt2 = $file;
  $ckt2 =~ s/\.s[23]p$/.ckt/;
  $ckt ne $ckt2 or die "Error: ckt argument should be renamed.\n";

  my $cktNew = $file;
  $cktNew =~ s/\.s[23]p$/_ckt.ckt/;
  if (not defined $optctl{copy}) {
    !system "cp $ckt $cktNew"
      or die "Error: Cannot cp circuit file $ckt as $cktNew.\n";
  } else {
    if (not defined $optctl{retain}) {
      die "ERROR: -retain option must be input with -copy.\n";
    }
    open CKT, "> $cktNew" or die "ERROR: Cannot open $cktNew.\n";
    open SP, "< $optctl{copy}" or die "ERROR: Cannot open $optctl{copy}.\n";
    print CKT "* Generated by rideMacroOpt using RIDE.\n\n";
    while (<SP>) {
      if (/^\./) {
        print CKT "\n";
      } else {
        s/_SHORTED_BY_RIDE//;
        s/\bn(\d+)\b/$1/g;
        print CKT;
      }
    }
    close SP;

    my %elm;
    foreach my $e (split ",", $optctl{retain}) {
      $elm{uc $e} = 1;
    }

    open SP, "< $ckt" or die "ERROR: Cannot open $ckt.\n";
    while (<SP>) {
      my $line = $_;
      if (/^\.(\S+)\s*:\s*(\S+)\s*=\s*(\S+)/) {
        my $cmd = uc $1;
        my $ele = uc $2;
        my $ele2 = uc $3;
        if ($cmd eq "RANGE" and defined $elm{$ele}) {
          print CKT $line;
        } elsif ($cmd eq "EQUATE" and defined $elm{$ele2}) {
          print CKT $line;
        }
      } elsif (/^\.(\S+)\s*:/) {
        if ($line =~ /noRemove\s*:\s* (\d+)\s*$/) {
          die "ERROR: The flow requires \"No remove\" to have been set.\n" if ($1 != 1);
        }
        print CKT $line;
      }
    }
    close CKT;
  }
  $ckt = $cktNew;

  print "-I- Running RIDE to determine self-resonance... ",
        (system "ride -pi-extract = $file > /dev/null") ? "Failed" : "OK", "\n";

  my $rlcq = $file;
  $rlcq =~ s/\.s[23]p$/.rlcq/;

  open RLCQ, "< $rlcq";

  my $res = -1;
  while (<RLCQ>) {
    next if (/^%/);
    $_ =~ s/^\s+//;
    my @nums = split /\s+/;
    if ($nums[4] < 0) {
      $res = $.;
      last;
    } else {
      $res = $.;
    }
  }
  close RLCQ;

  $res -= 1;               # Always subtract the initial comment line.
  $res -= 1 if ($res > 1); # One more frequency off

  for (my $attempts = 0; $attempts < 10 and $res > 10; ++$attempts) {

    print "-I- Uppermost frequency... #$res.\n";

    system "perl -i -p -e \'s/maxFreqIndex: (\\d+)/maxFreqIndex: $res/\' $ckt\n";

    my $cmd = "ride -circuit = $ckt -match = $file -output = $fileOpt 2>&1 > $fileLog";

    print "-I- Running RIDE for curve-fitting\n";
    system ( $cmd ) == 0 or die "-E- Command-line failed: \"$cmd\".\n";

    open CHECK, "< $fileLog";
    my ($singPer, $singCor);
    my ($diffPer, $diffCor);
    my ($LPer);
    while (<CHECK>) {
      if (/Percent error in peak single-sided Q = (\S+)\%, correlation = (\S+)\%/) {
        $singPer = $1;
        $singCor = $2;
      } elsif (/Percent error in peak differential Q = (\S+)\%, correlation = (\S+)\%/) {
        $diffPer = $1;
        $diffCor = $2;
      } elsif (/Original, optimized circuit L = \S+, \S+ nH \((\S+)%\)/) {
        $LPer = $1;
      }
    }

    print "-I- Final single-ended error = $singPer%, correlation = $singCor%.\n",
          "-I- Final differential error = $diffPer%, correlation = $diffCor%.\n",
          "-I- Final single-ended inductance error = $LPer%\n";

    if (abs($singPer) > $threshold
        or abs($diffPer) > $threshold
        or $singCor < $corrThreshold
        or $diffCor < $corrThreshold
        or abs($LPer) > $LThreshold)
    {
      print "-W- The results do not satisfy thresholds. Fitting with fewer frequencies.\n";
      $res -= 1;
    } else {
      exit 0;
    }

  }

  die "-E- The results do not satisfy thresholds.\n";

}
