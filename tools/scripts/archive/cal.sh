#!/usr/intel/bin/bash
##############################################################################
# Intel Top Secret							     #
##############################################################################
# Copyright (C) 2015, Intel Corporation.  All rights reserved.  	     #
#									     #
# This is the property of Intel Corporation and may only be utilized	     #
# pursuant to a written Restricted Use Nondisclosure Agreement  	     #
# with Intel Corporation.  It may not be used, reproduced, or		     #
# disclosed to others except in accordance with the terms and		     #
# conditions of such agreement. 					     #
#									     #
# All products, processes, computer systems, dates, and figures 	     #
# specified are preliminary based on current expectations, and are	     #
# subject to change without notice.					     #
##############################################################################
##############################################################################

elapsTime="$(date +%s)"

GEN_FILE=$(cat<<EOF >.cal_run_file

#run generated by... a derivitave of this script.... this print needs to be updated.  
$0 $@

EOF)

#log=drc.log

usage="

usage : $0 [-h] [-l <lvs_cdl>] <technology> <runset dir> <layout file> <top cell name> <drc module> <# of cpu> 

    Required arguments are the following positional list:
	-p <process>      : Process name (1271|1273)
	-r <runset dir>   : Path to the runset directory.  
	-l <layout path>  : Path to layout (gds or oas file).
	-t <lay top cell> : Layouts top cell name, if none is given first layout at top of layout file is run.
	-m <module>       : Module that should be tested (drc|IPall|HV|lvs).  

    Optional arguments are:
	-h                : prints this help info.
	-c <# of cpu>     : Number of cores to be used ("all")
	-n <netlist path> : Path to the schematic netlist.
	-s <sch top cell> : Schematice netlist's top cell.
"

while getopts "hl:p:r:t:m:c:n:s:" opt; do
    case $opt in
	h)
	    echo "$usage"
	    exit 1
	    ;;
	l)
	    if [ -f $OPTARG ] ; 
    then
		gdsPath="$OPTARG"
	    else 
		echo "-$opt requires a path to an existing file. $OPTARG does not exist. "
		echo "$usage"
		exit 1
	    fi
	    ;;
	t)
	    if [ -z $OPTARG ] ;
	    then
		gdsTopCell=""
	    else 
		gdsTopCell="$OPTARG"
	    fi
	    ;;
	n)
	    if [ -f $OPTARG ] ; 
    then
		cdlPath="$OPTARG"
	    else 
		echo "-$opt requires a path to an existing file. $OPTARG does not exist. "
		echo "$usage"
		exit 1
	    fi
	    ;;
	s)
	    if [ -z $OPTARG ] ;
	    then
		schTopCell=""
	    else 
		schTopCell="$OPTARG"
	    fi
	    ;;
	r)
	    if [ -d $OPTARG ] ; 
	    then
		runsetPath="$OPTARG"
	    else 
		echo "-$opt requires a path to an existing file. $OPTARG does not exist. "
		echo "$usage"
		exit 1
	    fi
	    ;;
	p)
	    if [[ $OPTARG = "1271" || $OPTARG = "1273" ]] ; 
	    then
		tech="$OPTARG"
	    else 
		echo "-$opt requires 1271, or 1273 as an input. $OPTARG is not an allowed process. "
		echo "$usage"
		exit 1
	    fi
	    ;;
	m)
	    if [[ $OPTARG = "drc" || $OPTARG = "IPall" || $OPTARG = "HV" || $OPTARG = "lvs" ]] ; 
	    then
		module="$OPTARG"
	    else 
		echo "-$opt requires DRC, IPall, HV, or LVS as an input. $OPTARG is not an allowed process. "
		echo "$usage"
		exit 1
	    fi
	    ;;
	c)
	    if [ -z $OPTARG ] ;
	    then
		cpu=""
	    else 
		cpu="$OPTARG"
	    fi
	    ;;
	\?)
	    echo "Invalid option: $OPTARG" 
	    echo "$usage"
	    exit 1
	    ;;
	:)
	    echo "Option -$OPTARG requires an argument." 
	    echo "$usage"
	    exit 1
	    ;;
    esac
done

#echo "cpu is $cpu, module is $module, tech is $tech, runsetPath is $runsetPath, schTopCell is $schTopCell, cdlPath is $cdlPath, gdsTopCell is $gdsTopCell, gdsPath is $gdsPath"
#exit 0

if [ ! -f "$gdsPath" ]
then
    echo "** ERROR - The layout file is not the proper file type. "
    echo "$usage"
    exit 1
fi

layout_file_type=${gdsPath##*.}
if [ $layout_file_type != "gds" ] && [ $layout_file_type != "oas" ] && [ $layout_file_type != "stm" ]
then
    echo "** ERROR - Layout file must be gds, or oasis file"
    echo "$usage"
    exit 1
fi

if [ $layout_file_type = "oas" ]
then
    set_layout_file_type="setenv DR_INPUT_FILE_TYPE OASIS" 
fi

if [ ! -d $runsetPath ]
then
    echo "** ERROR - The rule directory is not a directory. "
    echo "$usage"
    exit 1
fi

if [ "$module" = "drc" ]
then
    module_line=""
    rule_file="drcc"
    engine="-drc"
    # the following line is to run a subset of a given runset... hooks for this are not complete.  
    #module_line="setenv DRC_SELECT "$module
elif [ "$module" = "lvs" ]
then
    rule_file=$module
    if [ -z $cdlPath ]
    then
	engine="-spice lay.spi"
    else
	engine="-lvs -spice lay.sp"
    fi
        lvs="setenv DR_SCH_FILE $cdlPath ; setenv DR_SCH_CELL $schTopCell"
else
    engine="-drc"
    rule_file=$module
    lvs=""
fi


# if [ ! -f $rule_file ]
# then
#     if ! grep -q "$module" $runsetPath/select_check_file 
#     then
# 	echo "** ERROR - The rule file does not exist or is not the proper file type. "
# 	echo "$usage"
# 	exit 1
#     fi
# fi

if [[ $cpu =~ "[0-9]+" ]]
then
    echo ""
elif [[ $cpu = "all" ]]
then
    cpu=""
else
    cpu=""
    echo "$usage"
    exit 1
fi

if [[ $tech = "1273" ]] && [[ $rule_file = "drcc" ]]
then
    if [[ $layout_file_type = "oas" ]]
    then
	waiver="-waiver \$Calibre_RUNSET/waive/1273_waivers_setup_oas"
    else
	waiver="-waiver \$Calibre_RUNSET/waive/1273_waivers_setup_gds"
    fi
else
    waiver=""
fi

log=$module.log

limit_error_results="True"
if [[ limit_error_results = "True" ]]
then
    sed -e "s%DRC MAXIMUM RESULTS ALL%DRC MAXIMUM RESULTS 10%g" $runsetPath/useroverrides.svrf > ./useroverrides.svrf
    limit_results="setenv DR_userOverrides ./useroverrides.svrf"
fi

SVRFFILE=$(cat<<EOF >local_${module}.svrf
LAYOUT INPUT EXCEPTION SEVERITY POLYGON_DEGENERATE 1
LAYOUT INPUT EXCEPTION SEVERITY MISSING_REFERENCE 1
INCLUDE \$Calibre_RUNSET/p${tech}_${rule_file}.svrf
EOF)

RUNFILE=$(cat<<EOF >${module}.tcsh
#!/usr/intel/bin/tcsh

source /nfs/ch/disks/ch_icf_fdk_pvr_002/cal_share/shell/cal/.cshrc.cal #~/.cshrc.cal

if ( "$gdsTopCell" == "" ) then
    set topCell=\`calibredrv -a "puts [layout peek $gdsPath -topcell]"\`
    echo "Top cell was not set... setting it to \$topCell"
else
    set topCell="$gdsTopCell"
endif

setenv Calibre_RUNSET "$runsetPath"
setenv DR_PROCESS dotSix
source \$Calibre_RUNSET/p$tech.env
setenv DR_INPUT_FILE  "$gdsPath"
$set_layout_file_type
setenv DR_LAY_CELL "\$topCell"
$limit_results
$module_line
$lvs

calibre $engine -hier -turbo $cpu -hyper local_${module}.svrf $waiver >& $log

EOF)

chmod 770 $module.tcsh
./$module.tcsh

elapsTime="$(($(date +%s)-elapsTime)) seconds"

if [ "$module" = "lvs" ]
then
    if grep -q "SPICE NETLIST FILE" $log
    then
	if [ -z $cdlPath ]
	then
	    status="EXTRACTED"
	else
	    status=`grep "LVS complete" lvs.log | grep -v CPU | awk '{printf("%s\n",$3)}'`
	fi
	echo "*** LVS $status (elaps time is: $elapsTime) ***"
    else
	echo "*** ERROR - LVS run problem (elaps time is: $elapsTime) ***"
    fi
else
    if grep -q "DRC-H EXECUTIVE MODULE COMPLETED." $log
    then
	errors=`grep "TOTAL RESULTS GENERATED" $log | awk '{printf("%s %s",$6,$7)}'`
	echo "*** $errors DRC errors (elaps time is: $elapsTime) ***"
    else
	echo "*** ERROR - DRC run problem (elaps time is: $elapsTime) ***"
    fi
fi

