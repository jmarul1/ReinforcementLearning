#!/usr/intel/bin/bash
##############################################################################
# Intel Top Secret							     #
##############################################################################
# Copyright (C) 2015, Intel Corporation.  All rights reserved.  	     #
#									     #
# This is the property of Intel Corporation and may only be utilized	     #
# pursuant to a written Restricted Use Nondisclosure Agreement  	     #
# with Intel Corporation.  It may not be used, reproduced, or		     #
# disclosed to others except in accordance with the terms and		     #
# conditions of such agreement. 					     #
#									     #
# All products, processes, computer systems, dates, and figures 	     #
# specified are preliminary based on current expectations, and are	     #
# subject to change without notice.					     #
##############################################################################
# Author:
#   Mauricio Marulanda
##############################################################################

elapsTime="$(date +%s)"

#GEN_FILE=$(cat<<EOF >.icv_run_file
#
##run generated by... a derivitave of this script.... this print needs to be updated.  
##/nfs/ch/disks/ch_icf_fdk_pvr_003/johnjwri/code_development/shell/calibre/cal_drc.sh $gdsTopCell $gdsPath $runsetPath $drcModule $cpu $tech
#
#EOF)

#log=drc.log

usage="

usage : $0 [-h] [-l <lvs_cdl>] <technology> <runset dir> <layout file> <top cell name> <drc module> <# of cpu> 

    Required arguments are the following positional list:
	-p <process>      : Process name (1271|1273)
	-r <runset dir>   : Path to the runset directory.  
	-l <layout path>  : Path to layout (gds or oas file).
	-t <lay top cell> : Layouts top cell name, if none is given first layout at top of layout file is run.
	-m <module>       : Module that should be tested (drc|IPall|HV|lvs).  

    Optional arguments are:
	-h                : prints this help info.
	-c <# of cpu>     : Number of cores to be used ("all")
	-n <netlist path> : Path to the schematic netlist.
	-s <sch top cell> : Schematice netlist's top cell.
"

while getopts "hl:p:r:t:m:c:n:s:" opt; do
    case $opt in
	h)
	    echo "$usage"
	    exit 1
	    ;;
	l)
	    if [ -f $OPTARG ] ; 
    then
		gdsPath="$OPTARG"
	    else 
		echo "-$opt requires a path to an existing file. $OPTARG does not exist. "
		echo "$usage"
		exit 1
	    fi
	    ;;
	t)
	    if [ -z $OPTARG ] ;
	    then
		gdsTopCell=""
	    else 
		gdsTopCell="$OPTARG"
	    fi
	    ;;
	n)
	    if [ -f $OPTARG ] ; 
    then
		cdlPath="$OPTARG"
	    else 
		echo "-$opt requires a path to an existing file. $OPTARG does not exist. "
		echo "$usage"
		exit 1
	    fi
	    ;;
	s)
	    if [ -z $OPTARG ] ;
	    then
		schTopCell=""
	    else 
		schTopCell="$OPTARG"
	    fi
	    ;;
	r)
	    if [ -d $OPTARG ] ; 
	    then
		runsetPath="$OPTARG"
	    else 
		echo "-$opt requires a path to an existing file. $OPTARG does not exist. "
		echo "$usage"
		exit 1
	    fi
	    ;;
	p)
	    if [[ $OPTARG = "1271" || $OPTARG = "1273" ]] ; 
	    then
		tech="$OPTARG"
	    else 
		echo "-$opt requires 1271, or 1273 as an input. $OPTARG is not an allowed process. "
		echo "$usage"
		exit 1
	    fi
	    ;;
	m)
	    if [[ $OPTARG = "drc" || $OPTARG = "IPall" || $OPTARG = "HV" || $OPTARG = "lvs" ]] ; 
	    then
		module="$OPTARG"
	    else 
		echo "-$opt requires DRC, IPall, HV, or LVS as an input. $OPTARG is not an allowed process. "
		echo "$usage"
		exit 1
	    fi
	    ;;
	c)
	    if [ -z $OPTARG ] ;
	    then
		cpu=""
	    else 
		cpu="$OPTARG"
	    fi
	    ;;
	\?)
	    echo "Invalid option: $OPTARG" 
	    echo "$usage"
	    exit 1
	    ;;
	:)
	    echo "Option -$OPTARG requires an argument." 
	    echo "$usage"
	    exit 1
	    ;;
    esac
done

#echo "cpu is $cpu, module is $module, tech is $tech, runsetPath is $runsetPath, schTopCell is $schTopCell, cdlPath is $cdlPath, gdsTopCell is $gdsTopCell, gdsPath is $gdsPath"
#exit 0

if [ ! -f "$gdsPath" ]
then
    echo "** ERROR - The layout file is not the proper file type. "
    echo "$usage"
    exit 1
fi

layout_file_type=${gdsPath##*.}
if [ $layout_file_type != "gds" ] && [ $layout_file_type != "oas" ] && [ $layout_file_type != "stm" ]
then
    echo "** ERROR - Layout file must be gds, or oasis file"
    echo "$usage"
    exit 1
fi

if [ $layout_file_type = "oas" ]
then
    set_layout_file_type="OASIS" 
else
    set_layout_file_type="GDSII" 
fi

if [ ! -d $runsetPath ]
then
    echo "** ERROR - The rule directory is not a directory. "
    echo "$usage"
    exit 1
fi

if [ "$module" = "drc" ]
then
    rule_file="drcd.rs"
elif [ "$module" = "lvs" ]
then
    rule_file="trclvs.rs"
else
    rule_file=drc_${module}.rs
fi


if [ -z $gdsTopCell ]
then
    source /nfs/ch/disks/ch_icf_fdk_pvr_002/cal_share/shell/cal/.bashrc.cal
    gdsTopCell=`calibredrv -a "puts [layout peek $gdsPath -topcell]"`
    echo "Warining topcell not specified using first top cell found in layout file: $gdsTopCell"
fi

# if [ ! -f $rule_file ]
# then
#     if ! grep -q "$module" $runsetPath/select_check_file 
#     then
# 	echo "** ERROR - The rule file does not exist or is not the proper file type. "
# 	echo "$usage"
# 	exit 1
#     fi
# fi

if [[ $cpu =~ "[0-9]+" ]]
then
    do="nothing"
elif [[ $cpu = "all" ]]
then
    cpu="16"
else
    cpu=""
    echo "$usage"
    exit 1
fi

if [[ $tech = "1273" ]] && [[ $rule_file != "trclvs.rs" ]]
then
    cp -r $runsetPath/CPYDB .
    chmod -R 770 CPYDB
    cpydb="-I ./CPYDB"
else
    cpydb=""
fi

log=$module.log

RUNFILE=$(cat<<EOF > ./$module.tcsh
#!/usr/intel/bin/tcsh

source /nfs/ch/disks/ch_icf_fdk_pvr_002/cal_share/shell/icv/.cshrc.icv

if ( -f "$cdlPath" ) then
    echo "Converting netlist to ICV format..."
    icv_nettran \
	-sp ${cdlPath} \
	-sp-slashSpace \
	-outName ./netlist.icv_format >& converting2icv_netlist.log
    set netlist="-s netlist.icv_format -sf ICV -D NOCLD -D REMOVE_DANGLING_PORT_NONE -D _drSECTION_LEVEL=_drYES -D _drLVS=1 -vue -D _drPRUNE=_drNONE -D _drICFDEVICES=1"
else
    set netlist="-ex -D _drPRUNE=_drNONE -D _drICFDEVICES=1"
endif

echo "Running ICV..."
icv \
-dp${cpu} \
-turbo \
-D _drMaxError=100 \
-D _drPROCESS=6 \
\$netlist \
-c ${gdsTopCell} \
-i $gdsPath \
-f $set_layout_file_type \
-I . $cpydb \
-I $runsetPath/PXL $runsetPath/$rule_file >& $log

EOF)

chmod 770 $module.tcsh
./$module.tcsh

elapsTime="$(($(date +%s)-elapsTime)) seconds"

if [ "$module" = "lvs" ]
then
    if grep -q "IC Validator is done." $log
    then
	if grep -q "###" ${gdsTopCell}.RESULTS
	then
	    echo "*** LVS Failed (elaps time is: $elapsTime) ***"
	else
	    echo "*** LVS Passed (elaps time is: $elapsTime) ***"
	fi
    else
	echo "*** ERROR - LVS run problem (elaps time is: $elapsTime) ***"
    fi
else
    if grep -q "IC Validator is done." $log
    then
	echo "*** DRC Ran (elaps time is: $elapsTime) ***"
    else
	echo "*** ERROR - Run problem (elaps time is: $elapsTime) ***"
    fi
fi

