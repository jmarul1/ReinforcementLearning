;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Intel Top Secret                                                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Copyright (C) 2009, Intel Corporation.  All rights reserved.             ;;
;;                                                                          ;;
;; This is the property of Intel Corporation and may only be utilized       ;;
;; pursuant to a written Restricted Use Nondisclosure Agreement             ;;
;; with Intel Corporation.  It may not be used, reproduced, or              ;;
;; disclosed to others except in accordance with the terms and              ;;
;; conditions of such agreement.                                            ;;
;;                                                                          ;;
;; All products, processes, computer systems, dates, and figures            ;;
;; specified are preliminary based on current expectations, and are         ;;
;; subject to change without notice.                                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

<%
require 'csvhash' 

#
# GET VARIABLE VALUES FROM ARGUMENTS
#
csv        = vars.check('csv') 
params      = vars.check('params').split
param_opts = vars.check('param_opts').split
fun        = vars.check('fun')
cells       = vars['cell'] && vars['cell'].split
#status       = vars.check('status')
status       = vars['status']
dotproc       = vars['dotproc']

full_csvh = CsvHash.open csv

# Only select certain rows
csvh = full_csvh.select {|row| ((!cells or (cells.include?(row['cell']))) and (!status or (row['status'] == status)) and (!dotproc or row[dotproc] == '1'))}

%>

<%= do_not_edit(';;') %>

(defun <%= fun %> (cdfId)
  
  
  (let (
<% param_opts.each do |pname| %>
<% if pname == 'cell' %>        (cell             case( cdfId->type
                              ("cellData" cdfId->id->name)
                              ("instData" cdfId->id->cellName)
                              (t (warn "Cannot determine cell name from CDF type: %L\n" cdfId->type))))<% else %>        (<%= sprintf "%-16s cdfId->%s->value", pname, pname %>)<% end %> 
<% end %>
<% params.each do |pname| %>
        <%= pname %>
<% end %>
       )

<% param_opts.each do |pname| %>
    (fdkCdfDebug 3 "Model Condition Opt: <%= pname %> = %L\n" <%= pname %>)
<% end %>

    (cond
<% csvh.each do |row| %>
     ((and
<% param_opts.select {|e| row[e] and row[e] != 'N/A'}.each do |pname| %>
       (<%= pname %> == <%= row[pname].to_skill %>)
<% end %>
      )
<% params.each do |pname| %>
      (<%= pname %> = <%=
   if ( pname=='rowRepeatList' ) then
      '"'+row[pname].strip.gsub(/\s+/, ',')+'"'
   else
      row[pname].to_skill
   end
%>)
<% end %>
      )

<% end %>
      (t
       (let ((msg (strcat "<%= fun %>: Cannot determine model based on selected options:\n"
<% param_opts.each do |pname| %>
			  (sprintf nil "  <%= pname %> = %L\n" <%= pname %>)
<% end %>
             )))
	 (artError msg)))
    )
<% params.each do |pname| %>
    when( !null(<%= pname %>) cdfId-><%= pname %>->value = <%= pname %> )
<% end %>
    ))

