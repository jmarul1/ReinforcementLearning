;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Intel Top Secret                                                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Copyright (C) 2014, Intel Corporation.  All rights reserved.             ;;
;;                                                                          ;;
;; This is the property of Intel Corporation and may only be utilized       ;;
;; pursuant to a written Restricted Use Nondisclosure Agreement             ;;
;; with Intel Corporation.  It may not be used, reproduced, or              ;;
;; disclosed to others except in accordance with the terms and              ;;
;; conditions of such agreement.                                            ;;
;;                                                                          ;;
;; All products, processes, computer systems, dates, and figures            ;;
;; specified are preliminary based on current expectations, and are         ;;
;; subject to change without notice.                                        ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

putd( 'fdkPcell_mimcap_scl nil )
procedure(

  fdkPcell_mimcap_scl(libraryName cellName)

let((cellId defaults double_stack_flag)

  ; Get default PCell values from property bag
  cellId = ddGetObj( libraryName cellName)
  defaults = fdkGetPropTable( cellId ?name "defaults" ?string t)

  ; Run pcDefinePCell
  pcDefinePCell(

    list(ddGetObj(libraryName) cellName "layout" "maskLayout")

   (
     (w          string   defaults["minMimWidth"])
     (ldrawn     string   defaults["minMimLength"])
     (viaOffsetL string   defaults["minViaOffsetL"])
     (viaOffsetR string   defaults["minViaOffsetR"])
     (viaType    string   defaults["viaTypeVal"])
     (metType    string   defaults["metType"])
     (stacked    string   defaults["stacked"])
   )

  let((drTable paramTable pcCellObj)

    ;; Retrieve required design rules from property bag
    pcCellObj = ddGetObj( pcCellView~>libName pcCellView~>cellName)
    drTable = fdkGetPropTable( pcCellObj ?name "designRules")

    ;; Convert formal parameters to usable pcell values
    paramTable = makeTable("paramTable" nil)
    paramTable["width"] = fdkPcStringToMicrons( w)
    paramTable["length"] = fdkPcStringToMicrons( ldrawn)
    paramTable["viaOffsetL"] = fdkPcStringToMicrons( viaOffsetL)
    paramTable["viaOffsetR"] = fdkPcStringToMicrons( viaOffsetR)
    paramTable["viaType"] = viaType
    paramTable["metType"] = metType
    paramTable["stacked"] = stacked
    paramTable["minGrid"] = techGetMfgGridResolution( techGetTechFile( pcCellObj))

    fdkPcMimcapGenLayout(paramTable drTable)

  ))

))
