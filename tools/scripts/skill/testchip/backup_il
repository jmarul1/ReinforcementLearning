;;;;; PUT FILLERS WHERE DUTS ARE
procedure( adFillOnVarDuts(cv origBox dpl)
let( (pads padWH dutFill rfFill effOrig effXX fillBox dutOrigin dutCols dutRows)
  pads = dbOpenCellViewByType(car(dpl~>gndPad) cadr(dpl~>gndPad) "layout") padWH = adGetWH(adGetChkBoundary(pads)) dbClose(pads)
  pads = adFittingPads(car(dpl~>rowSize)-car(dpl~>padOrigin) dpl~>padPitchX car(padWH) "even"):adFittingPads(rowH*cadr(dpl~>rowSize)-cadr(dpl~>padOrigin) dpl~>padPitchY cadr(padWH) "odd")
  dutCols = car(pads)/2  dutRows = (cadr(pads)-1)/2  ;; Cols are in pairs and Rows are GSG 
  rfFill = dbOpenCellViewByType(car(dpl~>rfFill) cadr(dpl~>rfFill) "layout")
  dutFill = if(dpl~>dutFiller && !blankstrp(dpl~>dutFiller) dbOpenCellViewByType(car(dpl~>dutFiller) cadr(dpl~>dutFiller) "layout") nil)
  effXX = leftEdge(origBox):car(dpl~>padOrigin)+dpl~>padPitchX   dutOrigin = rodAddPoints(dpl~>padOrigin car(padWH):dpl~>padPitchY)
  for(ii 0 dutCols-1
    effOrig = car(origBox) ; reset
    for(jj 0 dutRows
      fillBox = list(effOrig cadr(effXX):cadr(dutOrigin)+2*jj*dpl~>padPitchY)
      when(jj==dutRows fillBox = list(effOrig cadr(effXX):topEdge(origBox))) ; last row fill to the top
      fillBox = dbTransformBBox(fillBox list(2*ii*dpl~>padPitchX:0 "R0" 1)) ; move the column in x if necessary
      adPlaceMosaic(cv fillBox rfFill) ; place the fill
      if(dutFill && jj < dutRows then
	fillBox = list(leftEdge(fillBox):topEdge(fillBox) rodAddToY(cadr(fillBox) cadr(padWH)))
	adPlaceMosaic(cv fillBox dutFill)
        effOrig = car(effOrig):topEdge(fillBox)
      else effOrig = car(effOrig):topEdge(fillBox)+cadr(padWH));if
  ));for for
t))
